=== 5. Testing 1 Node Graph ===
[ Inf ]
node: 0
( 0 )
( )
predecessors:
( 0 )
inbound_edges:
( -1 )

=== 6. Testing Unreachable Nodes ===
[ Inf 2.000000 2.000000 -Inf ]
node: 0
( 0 )
( )
node: 1
( 0 1 )
( 1 )
node: 2
( 0 1 2 )
( 1 2 )
node: 3
( )
( )
predecessors:
( 0 0 1 -1 )
inbound_edges:
( -1 1 2 -1 )

=== 7. Testing Self Loops ===
[ Inf 2.000000 2.000000 ]
node: 0
( 0 )
( )
node: 1
( 0 1 )
( 1 )
node: 2
( 0 1 2 )
( 1 2 )
predecessors:
( 0 0 1 )
inbound_edges:
( -1 1 2 )

=== 8. Testing Multiple Edges ===
[ Inf 10.000000 ]
node: 0
( 0 )
( )
node: 1
( 0 1 )
( 3 )
predecessors:
( 0 0 )
inbound_edges:
( -1 3 )

=== 9. Testing Directed Graphs ===
[ Inf 1.000000 ]
node: 0
( 0 )
( )
node: 1
( 0 1 )
( 4 )
predecessors:
( 0 0 )
inbound_edges:
( -1 4 )

=== 10. Testing Mode ===
[ Inf 200.000000 ]
node: 0
( 0 )
( )
node: 1
( 0 1 )
( 5 )
predecessors:
( 0 0 )
inbound_edges:
( -1 5 )

=== 11. Testing Multiple Widest Paths ===
[ Inf 100.000000 10.000000 10.000000 10.000000 3300.000000 10.000000 10.000000 ]
node: 7
( 0 1 2 7 )
( 0 1 2 )
predecessors:
( 0 0 1 0 3 0 5 2 )
inbound_edges:
( -1 0 1 3 4 6 7 2 )

=== 12. Testing 5 Node Simple Graph ===
[ Inf 8.000000 6.000000 6.000000 6.000000
  8.000000 Inf 6.000000 6.000000 6.000000
  6.000000 6.000000 Inf 10.000000 7.000000
  6.000000 6.000000 10.000000 Inf 7.000000
  6.000000 6.000000 7.000000 7.000000 Inf ]
[ Inf 8.000000 6.000000 6.000000 6.000000
  8.000000 Inf 6.000000 6.000000 6.000000
  6.000000 6.000000 Inf 10.000000 7.000000
  6.000000 6.000000 10.000000 Inf 7.000000
  6.000000 6.000000 7.000000 7.000000 Inf ]

=== 13. Testing 7 Node Wikipedia Graph ===
[ 40.000000 46.000000 40.000000 Inf 31.000000 29.000000 29.000000 ]
[ 40.000000 46.000000 40.000000 Inf 31.000000 29.000000 29.000000 ]
node: 0
( 3 1 2 0 )
( 3 2 1 )
node: 1
( 3 1 )
( 3 )
node: 2
( 3 1 2 )
( 3 2 )
node: 3
( 3 )
( )
node: 4
( 3 1 2 4 )
( 3 2 4 )
node: 5
( 3 1 2 4 5 )
( 3 2 4 8 )
node: 6
( 3 1 2 4 5 6 )
( 3 2 4 8 10 )
predecessors:
( 2 3 1 3 2 4 5 )
inbound_edges:
( 1 3 2 -1 4 8 10 )
get_widest_path()
( 3 1 2 4 5 6 )
( 3 2 4 8 10 )
